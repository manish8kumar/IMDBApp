// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace IMDBApp.Testing.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("IMDB")]
    public partial class IMDBFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "IMDBApp.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "IMDB", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding Movie to the list")]
        [NUnit.Framework.CategoryAttribute("addMovie")]
        [NUnit.Framework.TestCaseAttribute("The Shawshank Redemption", "1994", "Two imprisoned men bond over a number of years, finding solace and eventual redem" +
            "ption through acts of common decency.", "Tim Robbins , Morgan Freeman", "Niki Marvin", "Movie Added", null)]
        [NUnit.Framework.TestCaseAttribute("", "1994", "Two imprisoned men bond over a number of years, finding solace and eventual redem" +
            "ption through acts of common decency.", "Tim Robbins , Morgan Freeman", "Niki Marvin", "Movie Name cannot be empty", null)]
        [NUnit.Framework.TestCaseAttribute("The Shawshank Redemption", "-200", "Two imprisoned men bond over a number of years, finding solace and eventual redem" +
            "ption through acts of common decency.", "Tim Robbins , Morgan Freeman", "Niki Marvin", "Invalid Year Of Release", null)]
        [NUnit.Framework.TestCaseAttribute("The Shawshank Redemption", "999", "Two imprisoned men bond over a number of years, finding solace and eventual redem" +
            "ption through acts of common decency.", "Tim Robbins , Morgan Freeman", "Niki Marvin", "Invalid Year Of Release", null)]
        [NUnit.Framework.TestCaseAttribute("Redemption", "1994", "Two imprisoned men bond over a number of years, finding solace and eventual redem" +
            "ption through acts of common decency.", "", "Niki Marvin", "List of actor cannot be empty", null)]
        [NUnit.Framework.TestCaseAttribute("The Shawshank Redemption", "1994", "Two imprisoned men bond over a number of years, finding solace and eventual redem" +
            "ption through acts of common decency.", "Tim Robbins , Morgan Freeman", "", "Producer cannot be empty", null)]
        public virtual void AddingMovieToTheList(string name, string year_Of_Release, string plot, string actors, string producer, string response, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "addMovie"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("Year_Of_Release", year_Of_Release);
            argumentsOfScenario.Add("Plot", plot);
            argumentsOfScenario.Add("Actors", actors);
            argumentsOfScenario.Add("Producer", producer);
            argumentsOfScenario.Add("Response", response);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding Movie to the list", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given(string.Format("I have a movie with title \'{0}\',the year of release is \'{1}\',the plot is \'{2}\',th" +
                            "e actors are \'{3}\',the producer is \'{4}\'", name, year_Of_Release, plot, actors, producer), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.When("I add the movie in IMDB app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
 testRunner.Then(string.Format("Response should be \'{0}\'", response), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("List all movies in app")]
        [NUnit.Framework.CategoryAttribute("listMovie")]
        public virtual void ListAllMoviesInApp()
        {
            string[] tagsOfScenario = new string[] {
                    "listMovie"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List all movies in app", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 20
 testRunner.Given("I have collection of movies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 21
 testRunner.When("I fetch my movies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Year_Of_Release",
                            "Plot",
                            "Actors",
                            "Producer"});
                table1.AddRow(new string[] {
                            "Inception",
                            "2010",
                            "A thief who enters the dreams of others to steal their secrets must plant an idea" +
                                " into someone\'s mind in order to return home.",
                            "Tom Hanks, Meryl Streep",
                            "Christopher Nolan"});
#line 22
 testRunner.Then("I should have the following movies", ((string)(null)), table1, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
